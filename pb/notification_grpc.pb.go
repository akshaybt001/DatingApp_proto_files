// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: notification.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Notification_SendOTP_FullMethodName             = "/user.Notification/SendOTP"
	Notification_VerifyOTP_FullMethodName           = "/user.Notification/VerifyOTP"
	Notification_AddNotification_FullMethodName     = "/user.Notification/AddNotification"
	Notification_GetAllNotifications_FullMethodName = "/user.Notification/GetAllNotifications"
)

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationClient interface {
	SendOTP(ctx context.Context, in *SendOtpRequest, opts ...grpc.CallOption) (*NoMessage, error)
	VerifyOTP(ctx context.Context, in *VerifyOtpRequest, opts ...grpc.CallOption) (*VerifyOtpResponse, error)
	AddNotification(ctx context.Context, in *AddNotificationRequest, opts ...grpc.CallOption) (*NoMessage, error)
	GetAllNotifications(ctx context.Context, in *GetNotificationsByUserId, opts ...grpc.CallOption) (Notification_GetAllNotificationsClient, error)
}

type notificationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationClient(cc grpc.ClientConnInterface) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) SendOTP(ctx context.Context, in *SendOtpRequest, opts ...grpc.CallOption) (*NoMessage, error) {
	out := new(NoMessage)
	err := c.cc.Invoke(ctx, Notification_SendOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) VerifyOTP(ctx context.Context, in *VerifyOtpRequest, opts ...grpc.CallOption) (*VerifyOtpResponse, error) {
	out := new(VerifyOtpResponse)
	err := c.cc.Invoke(ctx, Notification_VerifyOTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) AddNotification(ctx context.Context, in *AddNotificationRequest, opts ...grpc.CallOption) (*NoMessage, error) {
	out := new(NoMessage)
	err := c.cc.Invoke(ctx, Notification_AddNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationClient) GetAllNotifications(ctx context.Context, in *GetNotificationsByUserId, opts ...grpc.CallOption) (Notification_GetAllNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Notification_ServiceDesc.Streams[0], Notification_GetAllNotifications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationGetAllNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notification_GetAllNotificationsClient interface {
	Recv() (*NotificationResponse, error)
	grpc.ClientStream
}

type notificationGetAllNotificationsClient struct {
	grpc.ClientStream
}

func (x *notificationGetAllNotificationsClient) Recv() (*NotificationResponse, error) {
	m := new(NotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotificationServer is the server API for Notification service.
// All implementations must embed UnimplementedNotificationServer
// for forward compatibility
type NotificationServer interface {
	SendOTP(context.Context, *SendOtpRequest) (*NoMessage, error)
	VerifyOTP(context.Context, *VerifyOtpRequest) (*VerifyOtpResponse, error)
	AddNotification(context.Context, *AddNotificationRequest) (*NoMessage, error)
	GetAllNotifications(*GetNotificationsByUserId, Notification_GetAllNotificationsServer) error
	mustEmbedUnimplementedNotificationServer()
}

// UnimplementedNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServer struct {
}

func (UnimplementedNotificationServer) SendOTP(context.Context, *SendOtpRequest) (*NoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOTP not implemented")
}
func (UnimplementedNotificationServer) VerifyOTP(context.Context, *VerifyOtpRequest) (*VerifyOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOTP not implemented")
}
func (UnimplementedNotificationServer) AddNotification(context.Context, *AddNotificationRequest) (*NoMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotification not implemented")
}
func (UnimplementedNotificationServer) GetAllNotifications(*GetNotificationsByUserId, Notification_GetAllNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllNotifications not implemented")
}
func (UnimplementedNotificationServer) mustEmbedUnimplementedNotificationServer() {}

// UnsafeNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServer will
// result in compilation errors.
type UnsafeNotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

func RegisterNotificationServer(s grpc.ServiceRegistrar, srv NotificationServer) {
	s.RegisterService(&Notification_ServiceDesc, srv)
}

func _Notification_SendOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).SendOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_SendOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).SendOTP(ctx, req.(*SendOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_VerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).VerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_VerifyOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).VerifyOTP(ctx, req.(*VerifyOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_AddNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).AddNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notification_AddNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).AddNotification(ctx, req.(*AddNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notification_GetAllNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetNotificationsByUserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServer).GetAllNotifications(m, &notificationGetAllNotificationsServer{stream})
}

type Notification_GetAllNotificationsServer interface {
	Send(*NotificationResponse) error
	grpc.ServerStream
}

type notificationGetAllNotificationsServer struct {
	grpc.ServerStream
}

func (x *notificationGetAllNotificationsServer) Send(m *NotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Notification_ServiceDesc is the grpc.ServiceDesc for Notification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOTP",
			Handler:    _Notification_SendOTP_Handler,
		},
		{
			MethodName: "VerifyOTP",
			Handler:    _Notification_VerifyOTP_Handler,
		},
		{
			MethodName: "AddNotification",
			Handler:    _Notification_AddNotification_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllNotifications",
			Handler:       _Notification_GetAllNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notification.proto",
}
