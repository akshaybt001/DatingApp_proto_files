// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_UserSignup_FullMethodName             = "/user.UserService/UserSignup"
	UserService_UserLogin_FullMethodName              = "/user.UserService/UserLogin"
	UserService_AdminLogin_FullMethodName             = "/user.UserService/AdminLogin"
	UserService_CreateProfile_FullMethodName          = "/user.UserService/CreateProfile"
	UserService_GetUser_FullMethodName                = "/user.UserService/GetUser"
	UserService_AdminAddInterest_FullMethodName       = "/user.UserService/AdminAddInterest"
	UserService_AdminDeleteInterest_FullMethodName    = "/user.UserService/AdminDeleteInterest"
	UserService_AdminUpdateInterest_FullMethodName    = "/user.UserService/AdminUpdateInterest"
	UserService_GetAllInterest_FullMethodName         = "/user.UserService/GetAllInterest"
	UserService_AddInterestUser_FullMethodName        = "/user.UserService/AddInterestUser"
	UserService_DeleteInterestUser_FullMethodName     = "/user.UserService/DeleteInterestUser"
	UserService_GetInterestById_FullMethodName        = "/user.UserService/GetInterestById"
	UserService_GetAllInterestsUser_FullMethodName    = "/user.UserService/GetAllInterestsUser"
	UserService_UserAddAge_FullMethodName             = "/user.UserService/UserAddAge"
	UserService_UserGetAge_FullMethodName             = "/user.UserService/UserGetAge"
	UserService_UserAddAddress_FullMethodName         = "/user.UserService/UserAddAddress"
	UserService_UserEditAddress_FullMethodName        = "/user.UserService/UserEditAddress"
	UserService_UserGetAddress_FullMethodName         = "/user.UserService/UserGetAddress"
	UserService_AdminAddGender_FullMethodName         = "/user.UserService/AdminAddGender"
	UserService_AdminUpdateGender_FullMethodName      = "/user.UserService/AdminUpdateGender"
	UserService_GetAllGender_FullMethodName           = "/user.UserService/GetAllGender"
	UserService_AddGenderUser_FullMethodName          = "/user.UserService/AddGenderUser"
	UserService_GetAllGenderUser_FullMethodName       = "/user.UserService/GetAllGenderUser"
	UserService_UserAddPreference_FullMethodName      = "/user.UserService/UserAddPreference"
	UserService_UserEditPreference_FullMethodName     = "/user.UserService/UserEditPreference"
	UserService_GetAllPreference_FullMethodName       = "/user.UserService/GetAllPreference"
	UserService_UserUploadProfileImage_FullMethodName = "/user.UserService/UserUploadProfileImage"
	UserService_UserGetProfilePic_FullMethodName      = "/user.UserService/UserGetProfilePic"
	UserService_HomePage_FullMethodName               = "/user.UserService/HomePage"
	UserService_IsUserExist_FullMethodName            = "/user.UserService/IsUserExist"
	UserService_GetUserData_FullMethodName            = "/user.UserService/GetUserData"
	UserService_DecrementLikeCount_FullMethodName     = "/user.UserService/DecrementLikeCount"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserSignup(ctx context.Context, in *UserSignupRequest, opts ...grpc.CallOption) (*UserSignupResponse, error)
	UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserSignupResponse, error)
	AdminLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserSignupResponse, error)
	CreateProfile(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*NoArg, error)
	GetUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserSignupResponse, error)
	AdminAddInterest(ctx context.Context, in *AddInterestRequest, opts ...grpc.CallOption) (*NoArg, error)
	AdminDeleteInterest(ctx context.Context, in *DeleteInterestRequest, opts ...grpc.CallOption) (*NoArg, error)
	AdminUpdateInterest(ctx context.Context, in *InterestResponse, opts ...grpc.CallOption) (*NoArg, error)
	GetAllInterest(ctx context.Context, in *NoArg, opts ...grpc.CallOption) (UserService_GetAllInterestClient, error)
	AddInterestUser(ctx context.Context, in *DeleteInterestRequest, opts ...grpc.CallOption) (*NoArg, error)
	DeleteInterestUser(ctx context.Context, in *DeleteInterestRequest, opts ...grpc.CallOption) (*NoArg, error)
	GetInterestById(ctx context.Context, in *GetInterestByIdRequest, opts ...grpc.CallOption) (*InterestResponse, error)
	GetAllInterestsUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (UserService_GetAllInterestsUserClient, error)
	UserAddAge(ctx context.Context, in *UserAgeRequest, opts ...grpc.CallOption) (*NoArg, error)
	UserGetAge(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserAgeResponse, error)
	UserAddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*NoArg, error)
	UserEditAddress(ctx context.Context, in *AddressResponse, opts ...grpc.CallOption) (*NoArg, error)
	UserGetAddress(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*AddressResponse, error)
	AdminAddGender(ctx context.Context, in *AddGenderRequest, opts ...grpc.CallOption) (*NoArg, error)
	AdminUpdateGender(ctx context.Context, in *GenderResponse, opts ...grpc.CallOption) (*NoArg, error)
	GetAllGender(ctx context.Context, in *NoArg, opts ...grpc.CallOption) (UserService_GetAllGenderClient, error)
	AddGenderUser(ctx context.Context, in *UpdateGenderRequest, opts ...grpc.CallOption) (*NoArg, error)
	GetAllGenderUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*GenderResponse, error)
	UserAddPreference(ctx context.Context, in *PreferenceRequest, opts ...grpc.CallOption) (*NoArg, error)
	UserEditPreference(ctx context.Context, in *PreferenceResponse, opts ...grpc.CallOption) (*NoArg, error)
	GetAllPreference(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*PreferenceResponse, error)
	UserUploadProfileImage(ctx context.Context, in *UserImageRequest, opts ...grpc.CallOption) (*UserImageResponse, error)
	UserGetProfilePic(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserImageResponse, error)
	HomePage(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*HomeResponse, error)
	IsUserExist(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*IsUserExistResponse, error)
	GetUserData(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserDataResponse, error)
	DecrementLikeCount(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*NoArg, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserSignup(ctx context.Context, in *UserSignupRequest, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, UserService_UserSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, UserService_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, UserService_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateProfile(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_CreateProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserSignupResponse, error) {
	out := new(UserSignupResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminAddInterest(ctx context.Context, in *AddInterestRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_AdminAddInterest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminDeleteInterest(ctx context.Context, in *DeleteInterestRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_AdminDeleteInterest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUpdateInterest(ctx context.Context, in *InterestResponse, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_AdminUpdateInterest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllInterest(ctx context.Context, in *NoArg, opts ...grpc.CallOption) (UserService_GetAllInterestClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_GetAllInterest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllInterestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllInterestClient interface {
	Recv() (*InterestResponse, error)
	grpc.ClientStream
}

type userServiceGetAllInterestClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllInterestClient) Recv() (*InterestResponse, error) {
	m := new(InterestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddInterestUser(ctx context.Context, in *DeleteInterestRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_AddInterestUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteInterestUser(ctx context.Context, in *DeleteInterestRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_DeleteInterestUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetInterestById(ctx context.Context, in *GetInterestByIdRequest, opts ...grpc.CallOption) (*InterestResponse, error) {
	out := new(InterestResponse)
	err := c.cc.Invoke(ctx, UserService_GetInterestById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllInterestsUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (UserService_GetAllInterestsUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], UserService_GetAllInterestsUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllInterestsUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllInterestsUserClient interface {
	Recv() (*InterestResponse, error)
	grpc.ClientStream
}

type userServiceGetAllInterestsUserClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllInterestsUserClient) Recv() (*InterestResponse, error) {
	m := new(InterestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) UserAddAge(ctx context.Context, in *UserAgeRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_UserAddAge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserGetAge(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserAgeResponse, error) {
	out := new(UserAgeResponse)
	err := c.cc.Invoke(ctx, UserService_UserGetAge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_UserAddAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserEditAddress(ctx context.Context, in *AddressResponse, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_UserEditAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserGetAddress(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*AddressResponse, error) {
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, UserService_UserGetAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminAddGender(ctx context.Context, in *AddGenderRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_AdminAddGender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AdminUpdateGender(ctx context.Context, in *GenderResponse, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_AdminUpdateGender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllGender(ctx context.Context, in *NoArg, opts ...grpc.CallOption) (UserService_GetAllGenderClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], UserService_GetAllGender_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetAllGenderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetAllGenderClient interface {
	Recv() (*GenderResponse, error)
	grpc.ClientStream
}

type userServiceGetAllGenderClient struct {
	grpc.ClientStream
}

func (x *userServiceGetAllGenderClient) Recv() (*GenderResponse, error) {
	m := new(GenderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) AddGenderUser(ctx context.Context, in *UpdateGenderRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_AddGenderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllGenderUser(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*GenderResponse, error) {
	out := new(GenderResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllGenderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserAddPreference(ctx context.Context, in *PreferenceRequest, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_UserAddPreference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserEditPreference(ctx context.Context, in *PreferenceResponse, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_UserEditPreference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllPreference(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*PreferenceResponse, error) {
	out := new(PreferenceResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllPreference_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserUploadProfileImage(ctx context.Context, in *UserImageRequest, opts ...grpc.CallOption) (*UserImageResponse, error) {
	out := new(UserImageResponse)
	err := c.cc.Invoke(ctx, UserService_UserUploadProfileImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserGetProfilePic(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserImageResponse, error) {
	out := new(UserImageResponse)
	err := c.cc.Invoke(ctx, UserService_UserGetProfilePic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) HomePage(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*HomeResponse, error) {
	out := new(HomeResponse)
	err := c.cc.Invoke(ctx, UserService_HomePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsUserExist(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*IsUserExistResponse, error) {
	out := new(IsUserExistResponse)
	err := c.cc.Invoke(ctx, UserService_IsUserExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserData(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*UserDataResponse, error) {
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DecrementLikeCount(ctx context.Context, in *GetUserById, opts ...grpc.CallOption) (*NoArg, error) {
	out := new(NoArg)
	err := c.cc.Invoke(ctx, UserService_DecrementLikeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserSignup(context.Context, *UserSignupRequest) (*UserSignupResponse, error)
	UserLogin(context.Context, *LoginRequest) (*UserSignupResponse, error)
	AdminLogin(context.Context, *LoginRequest) (*UserSignupResponse, error)
	CreateProfile(context.Context, *GetUserById) (*NoArg, error)
	GetUser(context.Context, *GetUserById) (*UserSignupResponse, error)
	AdminAddInterest(context.Context, *AddInterestRequest) (*NoArg, error)
	AdminDeleteInterest(context.Context, *DeleteInterestRequest) (*NoArg, error)
	AdminUpdateInterest(context.Context, *InterestResponse) (*NoArg, error)
	GetAllInterest(*NoArg, UserService_GetAllInterestServer) error
	AddInterestUser(context.Context, *DeleteInterestRequest) (*NoArg, error)
	DeleteInterestUser(context.Context, *DeleteInterestRequest) (*NoArg, error)
	GetInterestById(context.Context, *GetInterestByIdRequest) (*InterestResponse, error)
	GetAllInterestsUser(*GetUserById, UserService_GetAllInterestsUserServer) error
	UserAddAge(context.Context, *UserAgeRequest) (*NoArg, error)
	UserGetAge(context.Context, *GetUserById) (*UserAgeResponse, error)
	UserAddAddress(context.Context, *AddAddressRequest) (*NoArg, error)
	UserEditAddress(context.Context, *AddressResponse) (*NoArg, error)
	UserGetAddress(context.Context, *GetUserById) (*AddressResponse, error)
	AdminAddGender(context.Context, *AddGenderRequest) (*NoArg, error)
	AdminUpdateGender(context.Context, *GenderResponse) (*NoArg, error)
	GetAllGender(*NoArg, UserService_GetAllGenderServer) error
	AddGenderUser(context.Context, *UpdateGenderRequest) (*NoArg, error)
	GetAllGenderUser(context.Context, *GetUserById) (*GenderResponse, error)
	UserAddPreference(context.Context, *PreferenceRequest) (*NoArg, error)
	UserEditPreference(context.Context, *PreferenceResponse) (*NoArg, error)
	GetAllPreference(context.Context, *GetUserById) (*PreferenceResponse, error)
	UserUploadProfileImage(context.Context, *UserImageRequest) (*UserImageResponse, error)
	UserGetProfilePic(context.Context, *GetUserById) (*UserImageResponse, error)
	HomePage(context.Context, *GetUserById) (*HomeResponse, error)
	IsUserExist(context.Context, *GetUserById) (*IsUserExistResponse, error)
	GetUserData(context.Context, *GetUserById) (*UserDataResponse, error)
	DecrementLikeCount(context.Context, *GetUserById) (*NoArg, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserSignup(context.Context, *UserSignupRequest) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSignup not implemented")
}
func (UnimplementedUserServiceServer) UserLogin(context.Context, *LoginRequest) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServiceServer) AdminLogin(context.Context, *LoginRequest) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedUserServiceServer) CreateProfile(context.Context, *GetUserById) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserById) (*UserSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) AdminAddInterest(context.Context, *AddInterestRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAddInterest not implemented")
}
func (UnimplementedUserServiceServer) AdminDeleteInterest(context.Context, *DeleteInterestRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteInterest not implemented")
}
func (UnimplementedUserServiceServer) AdminUpdateInterest(context.Context, *InterestResponse) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateInterest not implemented")
}
func (UnimplementedUserServiceServer) GetAllInterest(*NoArg, UserService_GetAllInterestServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllInterest not implemented")
}
func (UnimplementedUserServiceServer) AddInterestUser(context.Context, *DeleteInterestRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInterestUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteInterestUser(context.Context, *DeleteInterestRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterestUser not implemented")
}
func (UnimplementedUserServiceServer) GetInterestById(context.Context, *GetInterestByIdRequest) (*InterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterestById not implemented")
}
func (UnimplementedUserServiceServer) GetAllInterestsUser(*GetUserById, UserService_GetAllInterestsUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllInterestsUser not implemented")
}
func (UnimplementedUserServiceServer) UserAddAge(context.Context, *UserAgeRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddAge not implemented")
}
func (UnimplementedUserServiceServer) UserGetAge(context.Context, *GetUserById) (*UserAgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetAge not implemented")
}
func (UnimplementedUserServiceServer) UserAddAddress(context.Context, *AddAddressRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddAddress not implemented")
}
func (UnimplementedUserServiceServer) UserEditAddress(context.Context, *AddressResponse) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditAddress not implemented")
}
func (UnimplementedUserServiceServer) UserGetAddress(context.Context, *GetUserById) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetAddress not implemented")
}
func (UnimplementedUserServiceServer) AdminAddGender(context.Context, *AddGenderRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAddGender not implemented")
}
func (UnimplementedUserServiceServer) AdminUpdateGender(context.Context, *GenderResponse) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateGender not implemented")
}
func (UnimplementedUserServiceServer) GetAllGender(*NoArg, UserService_GetAllGenderServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllGender not implemented")
}
func (UnimplementedUserServiceServer) AddGenderUser(context.Context, *UpdateGenderRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenderUser not implemented")
}
func (UnimplementedUserServiceServer) GetAllGenderUser(context.Context, *GetUserById) (*GenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGenderUser not implemented")
}
func (UnimplementedUserServiceServer) UserAddPreference(context.Context, *PreferenceRequest) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddPreference not implemented")
}
func (UnimplementedUserServiceServer) UserEditPreference(context.Context, *PreferenceResponse) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditPreference not implemented")
}
func (UnimplementedUserServiceServer) GetAllPreference(context.Context, *GetUserById) (*PreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPreference not implemented")
}
func (UnimplementedUserServiceServer) UserUploadProfileImage(context.Context, *UserImageRequest) (*UserImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUploadProfileImage not implemented")
}
func (UnimplementedUserServiceServer) UserGetProfilePic(context.Context, *GetUserById) (*UserImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetProfilePic not implemented")
}
func (UnimplementedUserServiceServer) HomePage(context.Context, *GetUserById) (*HomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomePage not implemented")
}
func (UnimplementedUserServiceServer) IsUserExist(context.Context, *GetUserById) (*IsUserExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserExist not implemented")
}
func (UnimplementedUserServiceServer) GetUserData(context.Context, *GetUserById) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedUserServiceServer) DecrementLikeCount(context.Context, *GetUserById) (*NoArg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementLikeCount not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserSignup(ctx, req.(*UserSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateProfile(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminAddInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminAddInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminAddInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminAddInterest(ctx, req.(*AddInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminDeleteInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminDeleteInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminDeleteInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminDeleteInterest(ctx, req.(*DeleteInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUpdateInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUpdateInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUpdateInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUpdateInterest(ctx, req.(*InterestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllInterest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllInterest(m, &userServiceGetAllInterestServer{stream})
}

type UserService_GetAllInterestServer interface {
	Send(*InterestResponse) error
	grpc.ServerStream
}

type userServiceGetAllInterestServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllInterestServer) Send(m *InterestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_AddInterestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddInterestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddInterestUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddInterestUser(ctx, req.(*DeleteInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteInterestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteInterestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteInterestUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteInterestUser(ctx, req.(*DeleteInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetInterestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetInterestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetInterestById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetInterestById(ctx, req.(*GetInterestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllInterestsUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserById)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllInterestsUser(m, &userServiceGetAllInterestsUserServer{stream})
}

type UserService_GetAllInterestsUserServer interface {
	Send(*InterestResponse) error
	grpc.ServerStream
}

type userServiceGetAllInterestsUserServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllInterestsUserServer) Send(m *InterestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_UserAddAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAddAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAddAge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAddAge(ctx, req.(*UserAgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserGetAge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserGetAge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserGetAge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserGetAge(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserEditAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserEditAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserEditAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserEditAddress(ctx, req.(*AddressResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserGetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserGetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserGetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserGetAddress(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminAddGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminAddGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminAddGender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminAddGender(ctx, req.(*AddGenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AdminUpdateGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenderResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AdminUpdateGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AdminUpdateGender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AdminUpdateGender(ctx, req.(*GenderResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllGender_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetAllGender(m, &userServiceGetAllGenderServer{stream})
}

type UserService_GetAllGenderServer interface {
	Send(*GenderResponse) error
	grpc.ServerStream
}

type userServiceGetAllGenderServer struct {
	grpc.ServerStream
}

func (x *userServiceGetAllGenderServer) Send(m *GenderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_AddGenderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddGenderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddGenderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddGenderUser(ctx, req.(*UpdateGenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllGenderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllGenderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllGenderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllGenderUser(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserAddPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserAddPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserAddPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserAddPreference(ctx, req.(*PreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserEditPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferenceResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserEditPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserEditPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserEditPreference(ctx, req.(*PreferenceResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllPreference(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserUploadProfileImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserUploadProfileImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserUploadProfileImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserUploadProfileImage(ctx, req.(*UserImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserGetProfilePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserGetProfilePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UserGetProfilePic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserGetProfilePic(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_HomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).HomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_HomePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).HomePage(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsUserExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsUserExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_IsUserExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsUserExist(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserData(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DecrementLikeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DecrementLikeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DecrementLikeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DecrementLikeCount(ctx, req.(*GetUserById))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserSignup",
			Handler:    _UserService_UserSignup_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _UserService_UserLogin_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _UserService_AdminLogin_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _UserService_CreateProfile_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "AdminAddInterest",
			Handler:    _UserService_AdminAddInterest_Handler,
		},
		{
			MethodName: "AdminDeleteInterest",
			Handler:    _UserService_AdminDeleteInterest_Handler,
		},
		{
			MethodName: "AdminUpdateInterest",
			Handler:    _UserService_AdminUpdateInterest_Handler,
		},
		{
			MethodName: "AddInterestUser",
			Handler:    _UserService_AddInterestUser_Handler,
		},
		{
			MethodName: "DeleteInterestUser",
			Handler:    _UserService_DeleteInterestUser_Handler,
		},
		{
			MethodName: "GetInterestById",
			Handler:    _UserService_GetInterestById_Handler,
		},
		{
			MethodName: "UserAddAge",
			Handler:    _UserService_UserAddAge_Handler,
		},
		{
			MethodName: "UserGetAge",
			Handler:    _UserService_UserGetAge_Handler,
		},
		{
			MethodName: "UserAddAddress",
			Handler:    _UserService_UserAddAddress_Handler,
		},
		{
			MethodName: "UserEditAddress",
			Handler:    _UserService_UserEditAddress_Handler,
		},
		{
			MethodName: "UserGetAddress",
			Handler:    _UserService_UserGetAddress_Handler,
		},
		{
			MethodName: "AdminAddGender",
			Handler:    _UserService_AdminAddGender_Handler,
		},
		{
			MethodName: "AdminUpdateGender",
			Handler:    _UserService_AdminUpdateGender_Handler,
		},
		{
			MethodName: "AddGenderUser",
			Handler:    _UserService_AddGenderUser_Handler,
		},
		{
			MethodName: "GetAllGenderUser",
			Handler:    _UserService_GetAllGenderUser_Handler,
		},
		{
			MethodName: "UserAddPreference",
			Handler:    _UserService_UserAddPreference_Handler,
		},
		{
			MethodName: "UserEditPreference",
			Handler:    _UserService_UserEditPreference_Handler,
		},
		{
			MethodName: "GetAllPreference",
			Handler:    _UserService_GetAllPreference_Handler,
		},
		{
			MethodName: "UserUploadProfileImage",
			Handler:    _UserService_UserUploadProfileImage_Handler,
		},
		{
			MethodName: "UserGetProfilePic",
			Handler:    _UserService_UserGetProfilePic_Handler,
		},
		{
			MethodName: "HomePage",
			Handler:    _UserService_HomePage_Handler,
		},
		{
			MethodName: "IsUserExist",
			Handler:    _UserService_IsUserExist_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _UserService_GetUserData_Handler,
		},
		{
			MethodName: "DecrementLikeCount",
			Handler:    _UserService_DecrementLikeCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllInterest",
			Handler:       _UserService_GetAllInterest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllInterestsUser",
			Handler:       _UserService_GetAllInterestsUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllGender",
			Handler:       _UserService_GetAllGender_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
